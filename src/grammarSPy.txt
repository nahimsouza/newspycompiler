
# comment

stmt: simple_stmt | compound_stmt
simple_stmt: small_stmt (';' small_stmt)* NEWLINE
small_stmt: (expr_stmt | print_stmt  | flow_stmt)

expr_stmt: targetlist [augassign listmaker]
augassign: ('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=')

targetlist = target ("," target)* 

OLD: target = NAME
NEW: target = NAME | ('self' '.' NAME) | (NAME '.' NAME parameters)

# For normal assignments, additional restrictions enforced by the interpreter
print_stmt: 'print' ( test (',' test)* )
flow_stmt: break_stmt | continue_stmt | return_stmt 
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' test

compound_stmt: if_stmt | while_stmt | for_stmt | funcdef | classdef
if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
while_stmt: 'while' test ':' suite ['else' ':' suite]

OLD: for_stmt: 'for' exprlist 'in' atom ':' suite ['else' ':' suite] |
	       'for' exprlist 'in' 'range' '(' NUMBER ',' NUMBER ')' ':' suite ['else' ':' suite] 

NEW: for_stmt: 'for' NAME 'in' atom ':' suite ['else' ':' suite] |
	       'for' NAME 'in' 'range' '(' NUMBER ',' NUMBER ')' ':' suite ['else' ':' suite] 

suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

funcdef: 'def' NAME parameters ':' suite
parameters: '(' [varargslist] ')'

OLD: varargslist: ([fpdef ['=' test] (',' fpdef ['=' test])* ] )
NEW: varargslist: fpdef ['=' test] (',' fpdef ['=' test])*   --> apenas tirei a parte de ser opcional

OLD: fpdef: NAME | '(' fplist ')'
NEW: fpdef: NAME | SELF | '(' fplist ')'

fplist: fpdef (',' fpdef)* 

classdef: 'class' NAME ['(' [atom [',' atom]* ] ')'] ':' suite

test: or_test ['if' or_test 'else' test]
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: arith_expr ('&' arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | atom

OLD: atom: '[' [listmaker] ']' | NAME | NUMBER | STRING+
NEW: atom: '[' [listmaker] ']' | NAME [ parameters | ('.' NAME parameters) ] | NUMBER | STRING+ | ('self' '.' NAME) | ( ['int' | 'float'] '(' test ')' )

listmaker: test (',' test)* 


# o primeiro uso de uma variável deve definir o seu tipo (sem tipagem dinâmica)
# STRING:  ''' (?)* ''' >> STRING eh qualquer caractere entre aspas ("") ou aspas simples('')
# NUMBER: int ou float
# self é uma palavra-chave e deve ser tratado
# não é necessário implementar property
# não vamos trabalhar com herança

====================================================

$ importante: estamos considerando apenas '\t' como indentacao

$ as alteracoes na gramatica estao indicadas por OLD/NEW

$ Por que tinha mudado isso?? >> term: factor (('*'|'/'|'%'|'//') (('int'|'float') '(' arith_expr ')' | factor))*
    >> por causa da linha 6 do teste ok1
    >> ficou diferente dessa vez: ... 

$ consideramos numeros com valor maximo 32767 (e minimo -32767), apenas pq já tinha isso no codigo

$ conferir depois no Lexer, pois esta considerando apenas o NEQC '!=', conferir se nao dá erro qndo tem algo '!true' por exemplo

$ no for_stmt, consideramos 'exprlist' como uma variável (NAME), pois em python 
as expressoes sempre sao do tipo: 'for v in range(0,10)', onde x sempre é uma variavel.
(obs: já está alterado na gramatica)

$ obs GenC: o código que está no GenC é o codigo do Tomazella, precisa conferir e alterar o que for necessário

$ obs NAME: Tomazella criou uma classe para Name, não entendi muito bem o por quê, mas criei também pois pode ser útil depois.

$ pensei em substituir a lista de Tests no PrintStmt por um listmaker, mas achei que daria problema no genC.

$ em Factor, na AST, o operador ESTAVA sendo guardado como int, coloquei String apenas para padronizar (ver se nao vai dar erro)

$ na classe Atom, o que tinhamos feito antes estava bem diferente, segui desta vez o modelo do Tomazella, talvez fique melhor no genC.

$ obs: no forStmt achei melhor nao usar PyNumber, coloquei os NUMBERS como int mesmo.

$ coloquei como 'error.show("Unexpected error in ...")' nos erros que NAO DEVEM acontecer (se acontecer, está com erro no código).

$ em varargslist, precisa conferir se a ordem dos parametros esta sendo guardada corretamente
    >> isso vale para todas os ArrayList por causa do genC (?)

$ ver em Fpdef se guardar o SELF como se fosse NAME vai dar erro no genC.

$ adicionei 'int' e 'float' como palavras chave

=====================================================

Análise Semântica (TO DO):
    1. Verificar se nome é uma palavra chave.
        1.1 - funcao
        1.2 - variavel
        1.3 - classe
    2. Primeiro uso da variavel define seu tipo.
        2.1 - precisa ver se uma variavel ja foi declarada
        2.2 - se a variavel ja foi declarada, nao pode associar com outro tipo
        2.3 - se a variavel nao havia sido declarada, associar com o tipo
    3. ver escopo dos nomes
        3.1 - nao pode repetir nomes de variaveis dentro da mesma classe (local)
        3.2 - nao pode repetir nomes de variaveis dentro da mesma funcao (local)
        3.3 - nao pode repetir nomes de variaveis globais 
        3.4 - nao pode repetir nome da classe
    4. verificar tipos das variaveis nas operacoes
        4.1 - nao pode somar/subtrair/mult/div/etc... um inteiro com uma string
        4.2 - comparacoes só podem ser feitas com tipos iguais (algumas só com inteiros: >=, <=, etc)
    5. verificar nomes invalidos de variaveis (por ex, comecando com numero: 3var = 2)
    6. verificar se esta chamando uma funcao que pertence àquela classe (a.getX())
    7. verificar quantidade e tipo de parametros nas chamadas das funções


*** precisa ver nos testes depois, se falta alguma analise semantica.
        
        
